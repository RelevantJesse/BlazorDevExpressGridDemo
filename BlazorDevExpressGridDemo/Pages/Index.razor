@page "/"
@using BlazorDevExpressGridDemo.Models
@using Microsoft.EntityFrameworkCore
@using System.Threading

@using BlazorDevExpressGridDemo.EditFormTemplates

@inject MyDbContext Context

<h1>Hello, world!</h1>

Welcome to your new app.

<DxDataGrid DataAsync="@GetEmployeesAsync">
    <Columns>
        <DxDataGridColumn Field="@nameof(Employee.Name)" />
    </Columns>
    <DetailRowTemplate>
        <DxDataGrid Data="@((context as Employee).Role)"
                    RowEditStart="@(dataItem => OnRowEditStarting(dataItem))"
                    @ref="@employeeGrid">
            <Columns>
            </Columns>
            <EditFormTemplate Context="editFormTemplateContext">
                <EditForm Model="@EditContext" Context="EditFormContext" OnValidSubmit="@HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <DxFormLayout>
                        <DxFormLayoutItem Caption="Role name:" ColSpanMd="12" Context="FormLayoutContext">
                            <Template>
                                <DxTextBox @bind-Text="@EditContext.Name" />
                            </Template>
                        </DxFormLayoutItem>
                    </DxFormLayout>
                </EditForm>
            </EditFormTemplate>
        </DxDataGrid>
    </DetailRowTemplate>
</DxDataGrid>

@code
{
    FormEditContext EditContext;

    async Task<IEnumerable<Employee>> GetEmployeesAsync(CancellationToken token)
    {
        return await Context.Employees.ToListAsync(token);
    }

    void OnRowEditStarting(Role role)
    {
        EditContext = new FormEditContext(role);
        EditContext.StateHasChanged += () => { InvokeAsync(StateHasChanged); };
    }
}
